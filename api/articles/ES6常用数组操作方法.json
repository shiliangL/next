{"title":"ES6常用数组操作方法","slug":"ES6常用数组操作方法","date":"2018-12-17T06:29:11.000Z","updated":"2018-12-17T07:08:11.070Z","comments":true,"path":"api/articles/ES6常用数组操作方法.json","photos":[],"link":"","excerpt":"","covers":null,"content":"<blockquote>\n<p>find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</p>\n</blockquote>\n<p>1.基本描述</p>\n<ul>\n<li>传入参数为回调函数,find 方法会对数组的每一项执行 callBack 函数,直到 callBack 返回 true,需要注意的是 callBack 函数会为数组中的每个索引调用即从 0 到 length - 1，而不仅仅是那些被赋值的索引，这意味着对于稀疏数组来说，该方法的效率要低于那些只遍历有值的索引的方法。</li>\n<li>callback 函数带有 3 个参数：当前元素的值、当前元素的索引，以及数组本身。回调默认返回当前值</li>\n<li>该方法不会改变原数组</li>\n<li>第一次调用 callback 函数时会确定元素的索引范围，因此在 find 方法开始执行之后添加到数组的新元素将不会被 callback 函数访问到。如果数组中一个尚未被 callback 函数访问到的元素的值被 callback 函数所改变，那么当 callback 函数访问到它时，它的值是将是根据它在数组中的索引所访问到的当前值。被删除的元素仍旧会被访问到。</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JS\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回符合条件的第一个元素</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = [<span class=\"number\">5</span>, <span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">130</span>, <span class=\"number\">150</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = arr.find(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item &gt; <span class=\"number\">120</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data, <span class=\"string\">\"结果\"</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// 数组中寻找质数（如果找不到质数则返回undefined）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPrime</span>(<span class=\"params\">element, index, array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> start = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (start &lt;= <span class=\"built_in\">Math</span>.sqrt(element)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element % start++ &lt; 1) &#123;</span><br><span class=\"line\">      return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return element &gt; 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log([4, 6, 8, 12].find(isPrime)); // undefined, not found</span><br><span class=\"line\">console.log([4, 5, 8, 12].find(isPrime)); // 5</span><br></pre></td></tr></table></figure></div>\n<p>2.兼容</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JS\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.find) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">\"find\"</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">predicate</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 1. Let O be ? ToObject(this value).</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'\"this\" is null or not defined'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 2. Let len be ? ToLength(? Get(O, \"length\")).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> len = o.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 3. If IsCallable(predicate) is false, throw a TypeError exception.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> predicate !== <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"predicate must be a function\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 4. If thisArg was supplied, let T be thisArg; else let T be undefined.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> thisArg = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">      <span class=\"comment\">// 5. Let k be 0.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 6. Repeat, while k &lt; len</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a. Let Pk be ! ToString(k).</span></span><br><span class=\"line\">        <span class=\"comment\">// b. Let kValue be ? Get(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">// c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).</span></span><br><span class=\"line\">        <span class=\"comment\">// d. If testResult is true, return kValue.</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> kValue = o[k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (predicate.call(thisArg, kValue, k, o)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> kValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// e. Increase k by 1.</span></span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 7. Return undefined.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。</p>\n</blockquote>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JS\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回符合条件的第一个元素的索引</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = [<span class=\"number\">5</span>, <span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">130</span>, <span class=\"number\">150</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = arr.findIndex(<span class=\"function\">(<span class=\"params\">item, index,arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item &gt; <span class=\"number\">120</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data, <span class=\"string\">\"结果\"</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>includes(searchElement, fromIndex) 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。参数查找元素,从哪里开始查找。</p>\n</blockquote>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 返回符合条件的第一个元素的索引</span><br><span class=\"line\">(() =&gt; &#123;</span><br><span class=\"line\">  const arr = [5, 12, 5, 130, 150];</span><br><span class=\"line\">  const data = arr.includes(searchElement, fromIndex);</span><br><span class=\"line\">  console.log(data, &quot;结果&quot;);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></div>\n","categories":[],"tags":[]}